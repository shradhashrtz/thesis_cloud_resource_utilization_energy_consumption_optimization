version: '3.8'

services:
  prometheus:
    image: prom/prometheus
    deploy:
      replicas: 1
      restart_policy:
        condition: any
    user: root
    ports:
      - "9090:9090"
    networks:
      - monitoring
    volumes:
      - prometheus_data:/var/lib/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./alert.rules.yml:/etc/prometheus/alert.rules.yml

  grafana:
    image: grafana/grafana
    deploy:
      replicas: 1
      restart_policy:
        condition: any
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SERVER_HTTP_PORT=3000
      - GF_SECURITY_ALLOW_EMBEDDING=true
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - monitoring

  node_exporter:
    image: prom/node-exporter
    deploy:
      replicas: 1
      restart_policy:
        condition: any
    ports:
      - "9100:9100"
    networks:
      - monitoring

  python-app-assignment:
    # image: shradha1919/python-app-assignment:1.0
    image: python-app-assignment:latest
    deploy:
      replicas: 1
      restart_policy:
        condition: any
    ports:
      - "8000:8000"
    environment:
      - PORT=8000
      - DOCKER_URL=tcp://172.27.36.125:2375
      - PROMETHEUS_HOST="0.0.0.0"
      - PROMETHEUS_PORT="5000" 
      - PROMETHEUS_URL=http://172.27.36.125:9090
      - ALERTMANAGER_URL=http://172.27.36.125:9093
    networks:
      - monitoring

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    deploy:
      replicas: 1
      restart_policy:
        condition: any
    ports:
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - monitoring

  alertmanager:
    image: prom/alertmanager
    deploy:
      replicas: 1
      restart_policy:
        condition: any
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
    networks:
      - monitoring

networks:
  monitoring:
    driver: overlay

volumes:
  grafana_data:
  prometheus_data:


# docker stack deploy -c docker-compose.yml my_thesis
