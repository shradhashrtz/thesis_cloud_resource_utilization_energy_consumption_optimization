events {
  worker_connections 1024;
}

http {
    log_format custom '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log custom;
    error_log /var/log/nginx/error.log warn;

    upstream prometheus {
        server prometheus:9090;  # Prometheus service name inside Docker Compose
    }

    server {
        listen 80;

        root /usr/share/nginx/html;
        index index.html index.htm;

        location / {
            proxy_pass http://grafana:3000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Prefix /grafana;
        }

        location /prometheus/ {
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass http://prometheus/;
            # proxy_redirect off;

           # Fix broken URLs when serving Prometheus from a subpath
            sub_filter 'href="/"' 'href="/prometheus/"';
            sub_filter 'src="/"' 'src="/prometheus/"';
            sub_filter_once off;


            # Adjust Prometheus's redirects to respect the /prometheus/ subpath
            proxy_redirect http://$host/ /prometheus/;
        }

        location /app/ {
            proxy_pass http://python-app-assignment:8000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}
